//
// Copyright (c) 2019-2020 Red Hat, Inc.
// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/
//
// SPDX-License-Identifier: EPL-2.0
//
// Contributors:
//   Red Hat, Inc. - initial API and implementation
//

// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/workspace/v1alpha1.Component":                schema_pkg_apis_workspace_v1alpha1_Component(ref),
		"./pkg/apis/workspace/v1alpha1.Workspace":                schema_pkg_apis_workspace_v1alpha1_Workspace(ref),
		"./pkg/apis/workspace/v1alpha1.WorkspaceComponentSpec":   schema_pkg_apis_workspace_v1alpha1_WorkspaceComponentSpec(ref),
		"./pkg/apis/workspace/v1alpha1.WorkspaceComponentStatus": schema_pkg_apis_workspace_v1alpha1_WorkspaceComponentStatus(ref),
		"./pkg/apis/workspace/v1alpha1.WorkspaceRouting":         schema_pkg_apis_workspace_v1alpha1_WorkspaceRouting(ref),
		"./pkg/apis/workspace/v1alpha1.WorkspaceRoutingSpec":     schema_pkg_apis_workspace_v1alpha1_WorkspaceRoutingSpec(ref),
		"./pkg/apis/workspace/v1alpha1.WorkspaceRoutingStatus":   schema_pkg_apis_workspace_v1alpha1_WorkspaceRoutingStatus(ref),
		"./pkg/apis/workspace/v1alpha1.WorkspaceSpec":            schema_pkg_apis_workspace_v1alpha1_WorkspaceSpec(ref),
		"./pkg/apis/workspace/v1alpha1.WorkspaceStatus":          schema_pkg_apis_workspace_v1alpha1_WorkspaceStatus(ref),
	}
}

func schema_pkg_apis_workspace_v1alpha1_Component(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Component is the Schema for the components API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/workspace/v1alpha1.WorkspaceComponentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/workspace/v1alpha1.WorkspaceComponentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.WorkspaceComponentSpec", "./pkg/apis/workspace/v1alpha1.WorkspaceComponentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_workspace_v1alpha1_Workspace(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Workspace is the Schema for the workspaces API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/workspace/v1alpha1.WorkspaceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/workspace/v1alpha1.WorkspaceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.WorkspaceSpec", "./pkg/apis/workspace/v1alpha1.WorkspaceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_workspace_v1alpha1_WorkspaceComponentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ComponentSpec defines the desired state of Component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"workspaceId": {
						SchemaProps: spec.SchemaProps{
							Description: "Id of workspace that contains this component",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"components": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map +listMapKey=name",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of devfile components to be processed by this component",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/workspace/v1alpha1.ComponentSpec"),
									},
								},
							},
						},
					},
					"commands": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map +listMapKey=name",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Commands from devfile, to be matched to components",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/workspace/v1alpha1.CommandSpec"),
									},
								},
							},
						},
					},
				},
				Required: []string{"workspaceId", "components"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.CommandSpec", "./pkg/apis/workspace/v1alpha1.ComponentSpec"},
	}
}

func schema_pkg_apis_workspace_v1alpha1_WorkspaceComponentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ComponentStatus defines the observed state of Component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ready": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the component has finished processing its spec",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"componentDescriptions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map +listMapKey=name",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Descriptions of processed components from spec",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/workspace/v1alpha1.ComponentDescription"),
									},
								},
							},
						},
					},
				},
				Required: []string{"ready", "componentDescriptions"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.ComponentDescription"},
	}
}

func schema_pkg_apis_workspace_v1alpha1_WorkspaceRouting(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkspaceRouting is the Schema for the workspaceroutings API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/workspace/v1alpha1.WorkspaceRoutingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/workspace/v1alpha1.WorkspaceRoutingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.WorkspaceRoutingSpec", "./pkg/apis/workspace/v1alpha1.WorkspaceRoutingStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_workspace_v1alpha1_WorkspaceRoutingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkspaceRoutingSpec defines the desired state of WorkspaceRouting",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"workspaceId": {
						SchemaProps: spec.SchemaProps{
							Description: "WorkspaceId for the workspace being routed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routingClass": {
						SchemaProps: spec.SchemaProps{
							Description: "Class of the routing: this drives which Workspace Routing controller will manage this routing",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routingSuffix": {
						SchemaProps: spec.SchemaProps{
							Description: "Routing suffix for cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"endpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "Machines to endpoints map",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Ref: ref("./pkg/apis/workspace/v1alpha1.Endpoint"),
												},
											},
										},
									},
								},
							},
						},
					},
					"podSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector that should be used by created services to point to the workspace Pod",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"workspaceId", "routingSuffix", "endpoints", "podSelector"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.Endpoint"},
	}
}

func schema_pkg_apis_workspace_v1alpha1_WorkspaceRoutingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkspaceRoutingStatus defines the observed state of WorkspaceRouting",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"podAdditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Additions to main workspace deployment",
							Ref:         ref("./pkg/apis/workspace/v1alpha1.PodAdditions"),
						},
					},
					"exposedEndpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "Machine name to exposed endpoint map",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Ref: ref("./pkg/apis/workspace/v1alpha1.ExposedEndpoint"),
												},
											},
										},
									},
								},
							},
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Routing reconcile phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.ExposedEndpoint", "./pkg/apis/workspace/v1alpha1.PodAdditions"},
	}
}

func schema_pkg_apis_workspace_v1alpha1_WorkspaceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkspaceSpec defines the desired state of Workspace",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"started": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the workspace should be started or stopped",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"routingClass": {
						SchemaProps: spec.SchemaProps{
							Description: "Routing class the defines how the workspace will be exposed to the external network",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"devfile": {
						SchemaProps: spec.SchemaProps{
							Description: "Workspace Structure defined in the Devfile format syntax. For more details see the Che 7 documentation: https://www.eclipse.org/che/docs/che-7/making-a-workspace-portable-using-a-devfile/",
							Ref:         ref("./pkg/apis/workspace/v1alpha1.DevfileSpec"),
						},
					},
				},
				Required: []string{"started", "devfile"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.DevfileSpec"},
	}
}

func schema_pkg_apis_workspace_v1alpha1_WorkspaceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkspaceStatus defines the observed state of Workspace",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"workspaceId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ideUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions represent the latest available observations of an object's state",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/workspace/v1alpha1.WorkspaceCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"workspaceId", "ideUrl"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/workspace/v1alpha1.WorkspaceCondition"},
	}
}
